

￼


JWT authentication from scratch with Vue.js and Node.js

January 14, 2021  17 min read 

￼

Introduction

JWT, an acronym for JSON Web Token, is an open standard that allows developers to verify the authenticity of pieces of information called claims via a signature. This signature can either be a secret or a public/private key pair. Together with the header and the payload, they can be used to generate or construct a JWT, as we will get to see later.

JWTs are commonly used for authentication or to safely transmit information across different parties. Here’s a common flow for JWT-based authentication systems: once a user has logged into an app, a JWT is created on the server and returned back to the calling client.

Each subsequent request will include the JWT as an authorization header, allowing access to protected routes and resources. Also, once the backend server verifies the signature is valid, it extracts the user data from the token as required. Note that in order to ensure a JWT is valid, only the party holding the keys or secret is responsible for signing the information.

In this post, we will be focusing on using JWT to perform authentication requests on a Vue.js client app with a Node.js backend. But first, let’s review how JWT works in a nutshell.

How JWT authentication works

In JWT authentication-based systems, when a user successfully logs in using their credentials, a JSON Web Token will be returned back to the calling client. Whenever the user wants to access a protected route or resource, the user agent sends the same JWT, typically in the Authorization header using the Bearer schema.

The content of the header should look like this:

Authorization: Bearer <token>

For a user to be granted access to a protected resource, the server routes will have to check for the presence of a valid JWT in the Authorization header. As a bonus, sending JWTs in the Authorization header also solves some issues related to CORS. This applies even if the app is served from an entirely different domain.

Note: Even if JWTs are signed, the information is still exposed to users or other parties because the data are unencrypted. Therefore, users are encouraged not to include sensitive information like credentials within a JWT payload. Additionally, tokens should always have an expiry.

Bootstrapping our Node.js application

Like we said earlier, we are going to explore how JWT works by setting up a Vue.js application with JWT as a means of authenticating to a backend Node.js server. We will start by building out the backend part of the application, which handles both generating and subsequently verifying the JWT. The full code for this tutorial can be found in this GitHub repo.

To begin with, let’s crack open our terminal and install all the necessary dependencies for our app. We will be making use of the jsonwebtoken package on npm, and we’ll use express for our server. Also, we will be installing babel-polyfill, which provides the polyfills necessary for a full ES2015+ environment.

For a full list of the dependencies for our application, check the package.json file. The full contents of that file are shown below:

{ "name": "jwt-vue-node-backend", "version": "1.0.0", "description": "Backend server for the JWT-Vue-Node-App", "main": "server.js", "scripts": { "create-dev-tables": "babel-node ./app/db/dbConnection createUserTable", "drop-dev-tables": "babel-node ./app/db/dbConnection dropUserTable", "dev": "nodemon --watch . --exec babel-node -- server/server", "start-dev": "babel-node server/server.js", "build-server": "babel server -d dist", "build": "rm -rf dist && mkdir dist && npm run build-server", "start-prod": "node dist/server.js", "start": "npm-run-all -p start-prod", "revamp": "npm-run-all -p dev drop-dev-tables" }, "esModuleInterop": true, "keywords": [ "Node", "Postgres" ], "author": "Alexander Nnakwue", "license": "MIT", "devDependencies": { "@babel/cli": "^7.12.1", "@babel/core": "^7.12.3", "@babel/node": "^7.12.10", "@babel/preset-env": "^7.12.1", "@babel/register": "^7.12.10", "babel-preset-es2015": "^6.24.1", "babel-watch": "^7.0.0", "eslint": "^7.11.0", "eslint-config-airbnb-base": "^14.2.0", "eslint-plugin-import": "^2.22.1", "nodemon": "^2.0.5" }, "dependencies": { "@hapi/joi": "^17.1.1", "babel-plugin-add-module-exports": "^1.0.4", "babel-polyfill": "^6.26.0", "bcryptjs": "^2.4.3", "body-parser": "^1.19.0", "cors": "^2.8.5", "dotenv": "^8.2.0", "express": "^4.17.1", "jsonwebtoken": "^8.5.1", "make-runnable": "^1.3.8", "moment": "^2.29.1", "npm-run-all": "^4.1.5", "pg": "^8.4.1" }, "engines": { "node": "13.7.0", "npm": "6.13.6" } }

As we can see from the file above, we have installed a bunch of packages. Basically, we have installed packages needed to make Babel work as a development dependency. We began by making sure we have the Babel CLI globally installed. We also need to make sure we install other required dependencies for our application: eslint, nodemon, pg, etc., as shown above.

Pay special attention to the scripts section of the package.json file, which should show us how to create the user table, drop the user table, build the server file of our app, and run the app on our dev environment. This section also shows us how to run our app in production. Other details can be found in the aforementioned file.

At the end of the day, our folder structure should look like this:

￼Folder structure for our completed app.

As you can see, the app is a monorepo, which will easily allow us to add the client folder, build, and output the build to a dist directory. Lastly, we add the build path to our server.js file, as we will see in a moment.

From the folder structure above, the app folder contains all the extra components needed for our backend to run successfully. It includes the controllers, the database handlers, helpers, the middleware folders, and so on. Again, for a complete view of the folder structure and to check out or clone the repo for our app, please have a look at the source code on GitHub.

As we mentioned earlier, the client folder contains everything that has to do with the user-facing part of the app. The server folder contains the server.js file, a basic Express server that powers our application. Let’s see what it looks like:

import express from 'express' import 'babel-polyfill' import cors from 'cors' import usersRoute from '../app/route/user.js' import path from 'path' const __dirname = path.resolve(); const app = express() // Add cors middleware app.use(cors()) // Add middleware for parsing JSON and urlencoded data app.use(express.urlencoded({ extended: false })) app.use(express.json()) // Serve static files from the Vue app app.use(express.static(path.join(`${__dirname}/client/dist`))) // The "catchall" handler: for any request that doesn't // match one above, send back Vue's index.html file. app.get('/*', (req, res) => { res.sendFile(path.join(`${__dirname}/client/dist/index.html`)) }) app.use('/api/v1', usersRoute) app.get('/', (req, res) => { res.status(200).send('Welcome to the JWT authentication with Node and Vue.js tutorial') }) // catch 404 and forward to error handler app.use((req, res, next) => { const err = new Error('Not Found') console.log(err) err.status = 404 res.send('Route not found') next(err) }) const server = app.listen(process.env.PORT || 3000).on('listening', () => { console.log(`App live and listening on port: ${process.env.PORT}` || 3000) }) export default app

Before we proceed and explain what is going on in the server file above, we need to set up the Babel config for our application. The .babelrc file is shown below:

{ "presets": ["@babel/preset-env"], "plugins": ["add-module-exports"] }

The preset we’re using above lets us write the latest JavaScript syntax and eliminates the need to check which syntax transforms (and, optionally, browser polyfills) are needed by the OS target environment(s). The plugin allows Babel to understand and interpret our module.exports statements and transforms.

Now let’s quickly return to the server.js file above. As we can see, we are serving static files and assets from our client build path. We are also import
